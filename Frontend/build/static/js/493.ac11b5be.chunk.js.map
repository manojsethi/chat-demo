{"version":3,"file":"static/js/493.ac11b5be.chunk.js","mappings":"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","sources":["pages/dashboard/chats/chattingArea.tsx","pages/dashboard/chats/components/chatingArea.tsx","pages/dashboard/chats/personal/chatWithUser.tsx","pages/dashboard/chats/personal/index.tsx"],"sourcesContent":["import { MdChatBubbleOutline } from \"react-icons/md\"\r\n\r\nconst ChattingArea = () => {\r\n  return (\r\n    <div className=\"text-black flex justify-center items-center mt-44\">\r\n      <div className=\"text-center\"> <div className=\"flex justify-center\"><MdChatBubbleOutline className=\"text-7xl text-green-500\" />\r\n      </div>\r\n        <h1 className=\"text-3xl text-center dark:text-white\">Free Chat With Users</h1></div></div>\r\n\r\n  )\r\n}\r\n\r\nexport default ChattingArea","import { Card, Col, Row } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst ChatingArea = (props: { sideBarChatChild: any, chatAreaChild: any }) => {\r\n    const { sideBarChatChild, chatAreaChild } = props;\r\n    return (\r\n        <div>\r\n            <Card style={{ height: \"75vh\" }} className=\"  dark:!bg-navy-800\">\r\n                <Row>\r\n                    <Col md={8} xl={8}>\r\n                        <div style={{ height: \"66vh\" }} className=\"shadow-3xl overflow-y-auto   rounded-md\">\r\n                            {sideBarChatChild}\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={16} xl={16} className=\"p-2 \">\r\n\r\n                        {chatAreaChild}\r\n                    </Col>\r\n                </Row>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatingArea;\r\n","import { UserOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Button, Input } from \"antd\";\r\nimport { HttpStatusCode } from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Loader from \"../../../../components/loader\";\r\nimport { ChatContext } from \"../../../../context/chat.context\";\r\nimport { SocketContext } from \"../../../../context/socket.context\";\r\nimport { IChatData } from \"../../../../interfaces/response/chats.interface\";\r\nimport { IUsersData } from \"../../../../interfaces/response/users.Respo.interafce\";\r\nimport ChatServices from \"../../../../services/index\";\r\n\r\n\r\nconst ChatWithUser = ({ selectedUser, setSelectedUser }: { selectedUser: IUsersData, setSelectedUser: (value: any) => any }) => {\r\n    const navigate = useNavigate()\r\n    let loggedInUser = localStorage.getItem(\"loggedInUser\")\r\n        ? JSON.parse(localStorage.getItem(\"loggedInUser\")!)\r\n        : null;\r\n    const [myChats, setMyChats] = useState<IChatData[]>([]);\r\n    const { socket } = useContext(SocketContext)\r\n    const { messageInfo } = useContext(ChatContext);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [loader, setLoader] = useState<boolean>(false);\r\n    const getChatsWithUser = async (userId: string) => {\r\n        setLoader(true);\r\n        let response = await ChatServices.getChats(userId);\r\n        if (response.statusCode === HttpStatusCode.Ok) setMyChats(response.data);\r\n        setLoader(false);\r\n    };\r\n\r\n\r\n    const messageHandler = (id: string, message: string) => {\r\n        setMessage(\"\");\r\n        setMyChats((prev) => [\r\n            ...prev,\r\n            {\r\n                message: message,\r\n                sent_from: loggedInUser._id,\r\n                __v: 0,\r\n                date: new Date().toString(),\r\n                _id: Math.random().toString(),\r\n                isReaded: false,\r\n                sent_to: id,\r\n                chatType: \"Personal\",\r\n            },\r\n        ]);\r\n        socket.mySocket.emit(\"personalMessage\", {\r\n            message,\r\n            sent_to: id,\r\n            chatType: \"Personal\",\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        if (selectedUser) getChatsWithUser(selectedUser._id);\r\n    }, [selectedUser]);\r\n    useEffect(() => {\r\n        if (\r\n            messageInfo.message &&\r\n            messageInfo.sentBy.id.toString() === selectedUser._id\r\n        )\r\n            setMyChats((prev) => [\r\n                ...prev,\r\n                {\r\n                    message: messageInfo.message,\r\n                    sent_from: messageInfo.sentBy.id,\r\n                    __v: 0,\r\n                    date: new Date().toString(),\r\n                    _id: Math.random().toString(),\r\n                    isReaded: true,\r\n                    sent_to: loggedInUser._id,\r\n                    chatType: \"Personal\",\r\n                },\r\n            ]);\r\n    }, [messageInfo.message]);\r\n    return (\r\n        <>\r\n            <div className=\"\">\r\n                <div className=\"bg-[#00A038] rounded-xl py-4\">\r\n                    <div className=\"flex justify-between px-6\">\r\n                        <div className=\"text-white flex gap-4 items-center\">\r\n                            <Avatar\r\n                                size={\"large\"}\r\n                                src={selectedUser?.profile ?? <UserOutlined />}\r\n                            />\r\n\r\n                            <p className=\"font-semibold\">{selectedUser.name}</p>\r\n                        </div>\r\n                        <div>\r\n                            <Button onClick={() => setSelectedUser(null)} type=\"primary\" className=\"text-white mt-2 text-base font-medium\" >Go Back</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {loader ? (\r\n                        <Loader />\r\n                    ) : (\r\n                        <div className=\"shadow-3xl dark:shadow bg-white  mt-6   dark: dark:bg-navy-900 overflow-y-auto overflow-x-hidden \">\r\n                            <div className=\"flex justify-center mt-2 py-4\">\r\n                                <p className=\"text-center text-white bg-[#00A038] px-10 rounded-2xl  \">\r\n                                    Today\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"overflow-y-auto\" style={{ minHeight: \"49vh\" }}>\r\n                                {myChats && myChats.length > 0 ? (\r\n                                    myChats.map((x) => {\r\n                                        if (x.sent_from.toString() === loggedInUser._id.toString())\r\n                                            return (\r\n                                                <div className=\"flex mb-3 px-3 \">\r\n                                                    <div className=\"bg-[#00A038] px-6 rounded-xl text-white\">\r\n                                                        {x.message}\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                        else\r\n                                            return (\r\n                                                <div className=\"flex justify-between px-3 mb-3 \">\r\n                                                    <div></div>\r\n                                                    <div className=\"text-black shadow-3xl px-6 rounded-xl\">\r\n                                                        {x.message}\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                    })\r\n                                ) : (\r\n                                    <div className=\"text-center mt-10 text-xl  dark:text-white font-medium pb-4\">\r\n                                        <p>No Chats Found</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                        </div>\r\n                    )}\r\n                    <Input\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type here . . . . .\"\r\n                        suffix={\r\n                            <FiSend\r\n                                onClick={() =>\r\n                                    message && messageHandler(selectedUser._id, message)\r\n                                }\r\n                                className=\"cursor-pointer\"\r\n                            />\r\n                        }\r\n                        size=\"large\"\r\n                        className=\"rounded-none w-full\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatWithUser;\r\n","import { UserOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Badge } from \"antd\";\r\nimport { HttpStatusCode } from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport Loader from \"../../../../components/loader\";\r\nimport { ChatContext } from \"../../../../context/chat.context\";\r\nimport { SocketContext } from \"../../../../context/socket.context\";\r\nimport { IUsersData } from \"../../../../interfaces/response/users.Respo.interafce\";\r\nimport ChatServices from \"../../../../services/index\";\r\nimport ChattingArea from \"../chattingArea\";\r\nimport ChatingArea from \"../components/chatingArea\";\r\nimport ChatWithUser from \"./chatWithUser\";\r\nconst PersonalChat = () => {\r\n    const [usersList, setUsersList] = useState<IUsersData[]>([]);\r\n    const [selectedUser, setSelectedUser] = useState<IUsersData | null>(null);\r\n    const { messageInfo } = useContext(ChatContext);\r\n    const { socket } = useContext(SocketContext);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const getAllUsers = async () => {\r\n        setLoading(true);\r\n        let response = await ChatServices.getUsers();\r\n        if (response.statusCode === HttpStatusCode.Ok)\r\n            setUsersList(\r\n                response.data.map((x) => {\r\n                    return { ...x, isSelected: false };\r\n                })\r\n            );\r\n        setLoading(false);\r\n    };\r\n    const handleSelectUser = (userData: IUsersData) => {\r\n        setSelectedUser(userData);\r\n    };\r\n    useEffect(() => {\r\n        getAllUsers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (messageInfo.message) {\r\n            let findUserExists = usersList.find(\r\n                (x) => x._id.toString() === messageInfo.sentBy.id.toString()\r\n            );\r\n            setUsersList((prev) => {\r\n                if (!findUserExists)\r\n                    prev = [\r\n                        ...prev,\r\n                        {\r\n                            __v: 0,\r\n                            _id: messageInfo.sentBy.id,\r\n                            createdAt: new Date().toString(),\r\n                            email: \"a@gfmail.com\",\r\n                            last_login: new Date().toString(),\r\n                            name: messageInfo.sentBy.name,\r\n                            password: \"\",\r\n                            unReadedMessages: 1,\r\n                            isSelected: false,\r\n                            profile: \"\",\r\n                            unreadMessages: 1,\r\n                        },\r\n                    ];\r\n                else prev = prev.map((prevUsers) => {\r\n                    if (prevUsers._id.toString() === messageInfo.sentBy.id)\r\n                        prevUsers = {\r\n                            ...prevUsers,\r\n                            unReadedMessages: Number(prevUsers.unReadedMessages) + 1,\r\n                        };\r\n\r\n                    return prevUsers;\r\n                });\r\n                return [...prev];\r\n            });\r\n        }\r\n    }, [messageInfo]);\r\n    useEffect(() => {\r\n        if (selectedUser) {\r\n            socket.mySocket.emit(\"startChat\", {\r\n                id: socket.user?._id,\r\n                userId: selectedUser._id,\r\n            });\r\n            setUsersList((prev) =>\r\n                prev.map((prevUsers) => {\r\n                    if (prevUsers._id === selectedUser._id)\r\n                        prevUsers = { ...prevUsers, unReadedMessages: 0 };\r\n                    return prevUsers;\r\n                })\r\n            );\r\n        }\r\n    }, [selectedUser]);\r\n\r\n    return (\r\n        <div>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : selectedUser ? (\r\n                selectedUser && (\r\n                    <ChatWithUser\r\n                        setSelectedUser={setSelectedUser}\r\n                        selectedUser={selectedUser}\r\n                    />\r\n                )\r\n            ) : (\r\n                <ChatingArea\r\n                    sideBarChatChild={\r\n                        usersList &&\r\n                        <div className=\"py-3\">\r\n                            {usersList?.map((x) => (\r\n                                <div className=\"px-2 mt-1 \">\r\n                                    <div\r\n                                        className={`${x.isSelected\r\n                                            ? \"bg-[#00A038] rounded-2xl  text-white w-full\"\r\n                                            : \"\"\r\n                                            } dark:text-white px-4`}\r\n                                    >\r\n                                        <Badge size=\"small\" count={x.unReadedMessages}>\r\n                                            <div\r\n                                                onClick={() => handleSelectUser(x)}\r\n                                                className={`flex\r\n                                         cursor-pointer items-center gap-4  p-2 `}\r\n                                            >\r\n                                                <Avatar\r\n                                                    size={\"large\"}\r\n                                                    src={\r\n                                                        x?.profile ?? (\r\n                                                            <UserOutlined\r\n                                                                className={`${x.isSelected ? \"text-white\" : \"text-[black]\"\r\n                                                                    } dark:text-white`}\r\n                                                            />\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <div\r\n                                                    className={`text-lg  ${x.isSelected ? \"text-white\" : \"text-black\"\r\n                                                        } dark:text-white`}\r\n                                                >\r\n                                                    {x.name?.length > 12\r\n                                                        ? x.name.slice(0, 12) + \"...\"\r\n                                                        : x.name}\r\n                                                </div>\r\n                                            </div>\r\n                                        </Badge>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    }\r\n                    chatAreaChild={<ChattingArea />}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PersonalChat;\r\n"],"names":["_jsx","className","children","_jsxs","MdChatBubbleOutline","props","sideBarChatChild","chatAreaChild","Card","style","height","Row","Col","md","xl","_ref","_selectedUser$profile","selectedUser","setSelectedUser","loggedInUser","useNavigate","localStorage","getItem","JSON","parse","_useState","useState","_useState2","_slicedToArray","myChats","setMyChats","socket","useContext","SocketContext","messageInfo","ChatContext","_useState3","_useState4","message","setMessage","_useState5","_useState6","loader","setLoader","getChatsWithUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userId","response","wrap","_context","prev","next","ChatServices","getChats","sent","statusCode","HttpStatusCode","Ok","data","stop","_x","apply","arguments","useEffect","_id","sentBy","id","toString","concat","_toConsumableArray","sent_from","__v","date","Date","Math","random","isReaded","sent_to","chatType","_Fragment","Avatar","size","src","profile","UserOutlined","name","Button","onClick","type","Loader","minHeight","length","map","x","Input","value","onChange","e","target","placeholder","suffix","FiSend","mySocket","emit","messageHandler","usersList","setUsersList","loading","setLoading","getAllUsers","getUsers","_objectSpread","isSelected","findUserExists","find","prevUsers","unReadedMessages","Number","createdAt","email","last_login","password","unreadMessages","_socket$user","user","ChatWithUser","ChatingArea","_x$profile","_x$name","Badge","count","slice","ChattingArea"],"sourceRoot":""}