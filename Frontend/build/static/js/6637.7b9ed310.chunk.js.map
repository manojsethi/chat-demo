{"version":3,"file":"static/js/6637.7b9ed310.chunk.js","mappings":"uJAkBA,UAhBqB,WACnB,OACEA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oDAAmDC,UAChEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,CACzB,KACDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,KAACI,EAAAA,IAAmB,CAACH,UAAU,+BAEjCD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,uCAAsCC,SAAC,6BAM7D,C,qKCgDA,UA3DoB,SAACG,GAKnB,IAAQC,EAAoCD,EAApCC,iBAAkBC,EAAkBF,EAAlBE,cAC1BC,GAAwDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhEI,EAAoBF,EAAA,GAAEG,EAAuBH,EAAA,GACpDI,GAA0CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEhCG,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAW,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACnB,OAAvBX,GAAiB,GAAMS,EAAAE,KAAA,EAEFC,EAAAA,QAASC,YAAYN,GAAQ,KAAD,EAArCE,EAAAK,KACCC,UACXC,EAAAA,EAAaD,QAAQ,CACnBE,QAAS,+BAEXrB,GAAwB,IAE1BI,GAAiB,GAAO,wBAAAS,EAAAS,OAAA,GAAAZ,EAAA,KACzB,gBAXsBa,GAAA,OAAAjB,EAAAkB,MAAA,KAAAC,UAAA,KAYvB,OACEnC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACuC,EAAAA,GAAM,CACLC,KAAK,UACLvC,UAAU,MACVwC,QAAS,WACP5B,GAAwB,EAC1B,EAAEX,SACH,kBAGDF,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,MAAO,CAAEC,OAAQ,QAAU3C,UAAU,sBAAqBC,UAC9DC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAG,CAAA3C,SAAA,EACFF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAE9C,UAChBF,EAAAA,EAAAA,KAAA,OACE2C,MAAO,CAAEC,OAAQ,QACjB3C,UAAU,0CAAyCC,SAElDI,OAGLN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAI/C,UAAU,OAAMC,SAClCK,SAINK,IACCZ,EAAAA,EAAAA,KAACiD,EAAAA,QAAgB,CACfC,aAAchC,EACdF,cAAeA,EACfmC,KAAMvC,EACNwC,QAASvC,MAKnB,C,sICIA,UA7DA,SAAyBM,GAAuD,IAApDgC,EAAIhC,EAAJgC,KAAMC,EAAOjC,EAAPiC,QAASF,EAAY/B,EAAZ+B,aAAclC,EAAaG,EAAbH,cACvDqC,GAAeC,EAAAA,EAAAA,KAARC,GAAiB5C,EAAAA,EAAAA,GAAA0C,EAAA,GAAb,GAOX,OALAG,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLD,EAAKE,aACP,CACF,GAAG,KAEDzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJP,KAAMA,EACNQ,SAAU,WACRP,GAAQ,EACV,EACAQ,KAAM,WACJL,EAAKM,QACP,EACAC,MAAM,eACNC,cAAe,CACbD,MAAO,SACPtB,KAAM,UACNwB,QAAShD,EACTiD,SAAUjD,GACVd,UAEFF,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAAAxC,UACHF,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAACX,KAAMA,EAAMY,SAAUjB,EAAckB,eAAgB,WAAO,EAAElE,UACjEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,CACPC,KAAM,OACNC,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,EACVrC,QAAS,qBAEXhC,UAEFF,EAAAA,EAAAA,KAACyE,EAAAA,EAAK,OAERzE,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,CACPC,KAAM,QACNC,UAAQ,EACRC,MAAO,CACL,CACED,UAAU,EACVrC,QAAS,sBAEXhC,UAEFF,EAAAA,EAAAA,KAACyE,EAAAA,EAAK,cAOpB,C,+MCsEA,UA1HkB,WAChB,IAAAjE,GAAoCC,EAAAA,EAAAA,UAA0B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DkE,EAAUhE,EAAA,GAAEiE,EAAajE,EAAA,GAChCI,GAA0CL,EAAAA,EAAAA,UACxC,MACDM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAFM8D,EAAa7D,EAAA,GAAE8D,EAAgB9D,EAAA,GAG9B+D,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,aAA3BF,YACRG,GAA8BxE,EAAAA,EAAAA,WAAkB,GAAMyE,GAAAvE,EAAAA,EAAAA,GAAAsE,EAAA,GAA/CjB,EAAOkB,EAAA,GAAEC,EAAUD,EAAA,GACpBE,EAAc,eAAAjE,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAA8D,EAAA,OAAAhE,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACJ,OAAjBuD,GAAW,GAAMzD,EAAAE,KAAA,EACI0D,EAAAA,QAAaC,cAAc,KAAD,GAA3CF,EAAQ3D,EAAAK,MACCyD,aAAeC,EAAAA,GAAeC,IACzCf,EACEU,EAASM,KAAKC,KAAI,SAACC,GACjB,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAC,IAAEE,YAAY,GAC7B,KAEJZ,GAAW,GAAO,wBAAAzD,EAAAS,OAAA,GAAAZ,EAAA,KACnB,kBAVmB,OAAAJ,EAAAkB,MAAA,KAAAC,UAAA,KA8CpB,OAhCAkB,EAAAA,EAAAA,YAAU,WACR4B,GACF,GAAG,KAEH5B,EAAAA,EAAAA,YAAU,WACR,GAAIsB,EAAYkB,SAAU,CACxB,IAAIC,EAAkBvB,EAAWwB,WAC/B,SAACL,GAAC,IAAAM,EAAA,OAAKN,EAAEO,IAAIC,cAAmC,QAAzBF,EAAKrB,EAAYkB,gBAAQ,IAAAG,OAAA,EAApBA,EAAsBE,WAAU,KAErC,IAArBJ,GACFtB,GAAc,SAAChD,GACb,IAAI2E,EAAQ3E,EACZ,IAAiB,OAAbiD,QAAa,IAAbA,OAAa,EAAbA,EAAewB,OAAQtB,EAAYkB,SAAU,CAAC,IAADO,EAC3CC,EAA6C,QAAxCD,EAAGD,EAAML,GAAiBQ,sBAAc,IAAAF,EAAAA,EAAI,EACrDC,GAAS,EACTF,EAAML,GAAiBQ,eAAiBD,CAC1C,CACA,OAAOF,CACT,GACJ,CACF,GAAG,CAACxB,KACJtB,EAAAA,EAAAA,YAAU,WACJoB,GACFD,GAAc,SAAChD,GAAI,OACjBA,EAAKiE,KAAI,SAACc,GAGR,OAFIA,EAAUN,MAAQxB,EAAcwB,MAClCM,GAASZ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQY,GAAS,IAAED,eAAgB,KACvCC,CACT,GAAE,GAGR,GAAG,CAAC9B,KAEF5E,EAAAA,EAAAA,KAAA,OAAAE,SACG8D,GACChE,EAAAA,EAAAA,KAAC2G,EAAAA,QAAM,IACL/B,EACFA,IACE5E,EAAAA,EAAAA,KAAC4G,EAAAA,QAAW,CACV/B,iBAAkBA,EAClBD,cAAeA,KAInB5E,EAAAA,EAAAA,KAAC6G,EAAAA,QAAW,CACVC,iBAAkB,SAACC,GACbA,GACF3B,GAEJ,EACA9E,iBACEoE,IACE1E,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,SACR,OAAVwE,QAAU,IAAVA,OAAU,EAAVA,EAAYkB,KAAI,SAACC,GAAC,IAAAmB,EAAA,OACjBhH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,OACEC,UAAS,GAAAgH,OACPpB,EAAEE,WACE,8CACA,GAAE,yBACgB7F,UAExBF,EAAAA,EAAAA,KAACkH,EAAAA,EAAK,CAACC,KAAK,QAAQX,MAAOX,EAAEY,eAAevG,UAC1CC,EAAAA,EAAAA,MAAA,OACEsC,QAAS,WAlE/BoC,EAkEuDgB,EAAE,EACnC5F,UAAS,+CAAiDC,SAAA,EAE1DF,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLD,KAAM,QACNE,KACErH,EAAAA,EAAAA,KAACsH,EAAAA,EAAY,CACXrH,UAAS,GAAAgH,OACPpB,EAAEE,WAAa,aAAe,eAAc,yBAKpD/F,EAAAA,EAAAA,KAAA,OACEC,UAAS,YAAAgH,OACPpB,EAAEE,WAAa,aAAe,aAAY,oBACzB7F,UAEZ,QAAN8G,EAAAnB,EAAEvB,YAAI,IAAA0C,OAAA,EAANA,EAAQO,QAAS,GACd1B,EAAEvB,KAAKkD,MAAM,EAAG,IAAM,MACtB3B,EAAEvB,eA9BiBuB,EAAEO,IAmC7B,MAKd7F,eAAeP,EAAAA,EAAAA,KAACyH,EAAAA,QAAY,OAKtC,C,kECzHA,UARe,WACb,OACEzH,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAC0H,EAAAA,QAAS,KAGhB,C","sources":["pages/dashboard/chats/chattingArea.tsx","pages/dashboard/groups/components/chatingArea.tsx","pages/dashboard/groups/components/createGroup.modal.tsx","pages/dashboard/groups/group/index.tsx","pages/dashboard/groups/index.tsx"],"sourcesContent":["import { MdChatBubbleOutline } from \"react-icons/md\";\r\n\r\nconst ChattingArea = () => {\r\n  return (\r\n    <div className=\"text-black flex justify-center items-center mt-44\">\r\n      <div className=\"text-center\">\r\n        {\" \"}\r\n        <div className=\"flex justify-center\">\r\n          <MdChatBubbleOutline className=\"text-7xl text-green-500\" />\r\n        </div>\r\n        <h1 className=\"text-3xl text-center dark:text-white\">\r\n          Free Chat With Users\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChattingArea;\r\n","import { Button, Card, Col, Row, notification } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport services from \"../../../../services\";\r\nimport CreateGroupModal from \"./createGroup.modal\";\r\n\r\nconst ChatingArea = (props: {\r\n  sideBarChatChild: any;\r\n  chatAreaChild: any;\r\n  setRefreshGroups: (value: boolean) => void;\r\n}) => {\r\n  const { sideBarChatChild, chatAreaChild } = props;\r\n  const [openCreateGroupModal, setOpenCreateGroupModal] = useState(false);\r\n  const [creatingGroup, setCreatingGroup] = useState(false);\r\n\r\n  const handleGroupCreate = async (values: any) => {\r\n    setCreatingGroup(true);\r\n\r\n    let response = await services.createGroup(values);\r\n    if (response.success) {\r\n      notification.success({\r\n        message: \"Group created successfully\",\r\n      });\r\n      setOpenCreateGroupModal(false);\r\n    }\r\n    setCreatingGroup(false);\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        type=\"primary\"\r\n        className=\"m-4\"\r\n        onClick={() => {\r\n          setOpenCreateGroupModal(true);\r\n        }}\r\n      >\r\n        Create Group\r\n      </Button>\r\n      <Card style={{ height: \"75vh\" }} className=\"  dark:!bg-navy-800\">\r\n        <Row>\r\n          <Col md={8} xl={8}>\r\n            <div\r\n              style={{ height: \"66vh\" }}\r\n              className=\"shadow-2xl overflow-y-auto   rounded-md\"\r\n            >\r\n              {sideBarChatChild}\r\n            </div>\r\n          </Col>\r\n          <Col md={16} xl={16} className=\"p-2 \">\r\n            {chatAreaChild}\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n      {openCreateGroupModal && (\r\n        <CreateGroupModal\r\n          handleSubmit={handleGroupCreate}\r\n          creatingGroup={creatingGroup}\r\n          open={openCreateGroupModal}\r\n          setOpen={setOpenCreateGroupModal}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatingArea;\r\n","import { Card, Form, Input, Modal } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport FormItem from \"antd/es/form/FormItem\";\nimport React, { useEffect } from \"react\";\n\nfunction CreateGroupModal({ open, setOpen, handleSubmit, creatingGroup }: any) {\n  const [form] = useForm();\n\n  useEffect(() => {\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n  return (\n    <Modal\n      open={open}\n      onCancel={() => {\n        setOpen(false);\n      }}\n      onOk={() => {\n        form.submit();\n      }}\n      title=\"Create Group\"\n      okButtonProps={{\n        title: \"Submit\",\n        type: \"primary\",\n        loading: creatingGroup,\n        disabled: creatingGroup,\n      }}\n    >\n      <Card>\n        <Form form={form} onFinish={handleSubmit} onFinishFailed={() => {}}>\n          <div>\n            <label>Name</label>\n            <FormItem\n              name={\"name\"}\n              required\n              rules={[\n                {\n                  required: true,\n                  message: \"Name is required\",\n                },\n              ]}\n            >\n              <Input />\n            </FormItem>\n            <label>About</label>\n            <FormItem\n              name={\"about\"}\n              required\n              rules={[\n                {\n                  required: true,\n                  message: \"About is required\",\n                },\n              ]}\n            >\n              <Input />\n            </FormItem>\n          </div>\n        </Form>\n      </Card>\n    </Modal>\n  );\n}\n\nexport default CreateGroupModal;\n","import { UserOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Badge } from \"antd\";\r\nimport { HttpStatusCode } from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport Loader from \"../../../../components/loader\";\r\nimport { ChatContext } from \"../../../../context/chat.context\";\r\nimport ChatServices from \"../../../../services/index\";\r\nimport ChatingArea from \"../components/chatingArea\";\r\nimport ChatInGroup from \"./chatInGroup\";\r\nimport ChattingArea from \"../../chats/chattingArea\";\r\nimport { IMyGroupsData } from \"../../../../interfaces/response/groupRespo.interface\";\r\n\r\nconst GroupChat = () => {\r\n  const [groupsList, setGroupsList] = useState<IMyGroupsData[]>([]);\r\n  const [selectedGroup, setSelectedGroup] = useState<IMyGroupsData | null>(\r\n    null\r\n  );\r\n  const { messageInfo } = useContext(ChatContext);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const getAllMyGroups = async () => {\r\n    setLoading(true);\r\n    let response = await ChatServices.getMygroups();\r\n    if (response.statusCode === HttpStatusCode.Ok)\r\n      setGroupsList(\r\n        response.data.map((x) => {\r\n          return { ...x, isSelected: false };\r\n        })\r\n      );\r\n    setLoading(false);\r\n  };\r\n  const handleSelectGroup = (userData: IMyGroupsData) => {\r\n    setSelectedGroup(userData);\r\n  };\r\n  useEffect(() => {\r\n    getAllMyGroups();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (messageInfo.group_id) {\r\n      let foundGroupIndex = groupsList.findIndex(\r\n        (x) => x._id.toString() === messageInfo.group_id?.toString()\r\n      );\r\n      if (foundGroupIndex !== -1)\r\n        setGroupsList((prev) => {\r\n          let _prev = prev;\r\n          if (selectedGroup?._id !== messageInfo.group_id) {\r\n            let count = _prev[foundGroupIndex].unreadMessages ?? 0;\r\n            count += 1;\r\n            _prev[foundGroupIndex].unreadMessages = count;\r\n          }\r\n          return _prev;\r\n        });\r\n    }\r\n  }, [messageInfo]);\r\n  useEffect(() => {\r\n    if (selectedGroup) {\r\n      setGroupsList((prev) =>\r\n        prev.map((prevGroup) => {\r\n          if (prevGroup._id === selectedGroup._id)\r\n            prevGroup = { ...prevGroup, unreadMessages: 0 };\r\n          return prevGroup;\r\n        })\r\n      );\r\n    }\r\n  }, [selectedGroup]);\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : selectedGroup ? (\r\n        selectedGroup && (\r\n          <ChatInGroup\r\n            setSelectedGroup={setSelectedGroup}\r\n            selectedGroup={selectedGroup}\r\n          />\r\n        )\r\n      ) : (\r\n        <ChatingArea\r\n          setRefreshGroups={(value) => {\r\n            if (value) {\r\n              getAllMyGroups();\r\n            }\r\n          }}\r\n          sideBarChatChild={\r\n            groupsList && (\r\n              <div className=\"py-3\">\r\n                {groupsList?.map((x) => (\r\n                  <div className=\"px-2 mt-1 \" key={x._id}>\r\n                    <div\r\n                      className={`${\r\n                        x.isSelected\r\n                          ? \"bg-[#00A038] rounded-2xl  text-white w-full\"\r\n                          : \"\"\r\n                      } dark:text-white px-4`}\r\n                    >\r\n                      <Badge size=\"small\" count={x.unreadMessages}>\r\n                        <div\r\n                          onClick={() => handleSelectGroup(x)}\r\n                          className={`flex cursor-pointer items-center gap-4  p-2 `}\r\n                        >\r\n                          <Avatar\r\n                            size={\"large\"}\r\n                            src={\r\n                              <UserOutlined\r\n                                className={`${\r\n                                  x.isSelected ? \"text-white\" : \"text-[black]\"\r\n                                } dark:text-white`}\r\n                              />\r\n                            }\r\n                          />\r\n                          <div\r\n                            className={`text-lg  ${\r\n                              x.isSelected ? \"text-white\" : \"text-black\"\r\n                            } dark:text-white`}\r\n                          >\r\n                            {x.name?.length > 12\r\n                              ? x.name.slice(0, 12) + \"...\"\r\n                              : x.name}\r\n                          </div>\r\n                        </div>\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )\r\n          }\r\n          chatAreaChild={<ChattingArea />}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupChat;\r\n","import React from \"react\";\r\nimport GroupChat from \"./group\";\r\n\r\nconst Groups = () => {\r\n  return (\r\n    <div>\r\n      <GroupChat />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Groups;\r\n"],"names":["_jsx","className","children","_jsxs","MdChatBubbleOutline","props","sideBarChatChild","chatAreaChild","_useState","useState","_useState2","_slicedToArray","openCreateGroupModal","setOpenCreateGroupModal","_useState3","_useState4","creatingGroup","setCreatingGroup","handleGroupCreate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","services","createGroup","sent","success","notification","message","stop","_x","apply","arguments","Button","type","onClick","Card","style","height","Row","Col","md","xl","CreateGroupModal","handleSubmit","open","setOpen","_useForm","useForm","form","useEffect","resetFields","Modal","onCancel","onOk","submit","title","okButtonProps","loading","disabled","Form","onFinish","onFinishFailed","FormItem","name","required","rules","Input","groupsList","setGroupsList","selectedGroup","setSelectedGroup","messageInfo","useContext","ChatContext","_useState5","_useState6","setLoading","getAllMyGroups","response","ChatServices","getMygroups","statusCode","HttpStatusCode","Ok","data","map","x","_objectSpread","isSelected","group_id","foundGroupIndex","findIndex","_messageInfo$group_id","_id","toString","_prev","_prev$foundGroupIndex","count","unreadMessages","prevGroup","Loader","ChatInGroup","ChatingArea","setRefreshGroups","value","_x$name","concat","Badge","size","Avatar","src","UserOutlined","length","slice","ChattingArea","GroupChat"],"sourceRoot":""}