{"version":3,"file":"static/js/5996.509004d9.chunk.js","mappings":"iQAqFA,UA9EA,SAAkCA,GAMzB,IALPC,EAAID,EAAJC,KACAC,EAAOF,EAAPE,QACAC,EAAYH,EAAZG,aACAC,EAAYJ,EAAZI,aACAC,EAAkBL,EAAlBK,mBAEAC,GAAeC,EAAAA,EAAAA,KAARC,GAAiBC,EAAAA,EAAAA,GAAAH,EAAA,GAAb,GACXI,GAA0DC,EAAAA,EAAAA,UAExD,IAAGC,GAAAH,EAAAA,EAAAA,GAAAC,EAAA,GAFEG,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GAIhDG,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACHC,EAAAA,QAASC,0BAA0BxB,EAAayB,KAAK,KAAD,GAArEP,EAAQE,EAAAM,MACCC,SAAShB,EAAyBO,EAASU,KAAKC,OAAO,wBAAAT,EAAAU,OAAA,GAAAb,EAAA,KACrE,kBAHsB,OAAAJ,EAAAkB,MAAA,KAAAC,UAAA,KAWvB,OANAC,EAAAA,EAAAA,YAAU,WAER,OADArB,IACO,WACLP,EAAK6B,aACP,CACF,GAAG,KAEDC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJtC,KAAMA,EACNuC,SAAU,WACRtC,GAAQ,EACV,EACAuC,KAAM,WACJjC,EAAKkC,QACP,EACAC,MAAM,mBACNC,cAAe,CACbD,MAAO,SACPE,KAAM,UACNC,QAASzC,EACT0C,SAAU1C,GACV2C,UAEFV,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAAAD,UACHV,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CAAC1C,KAAMA,EAAM2C,SAAU/C,EAAcgD,eAAgB,WAAO,EAAEJ,UACjEK,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EACEV,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,CAAAN,UACXV,EAAAA,EAAAA,KAACgB,EAAAA,EAAaC,KAAI,CAACC,MAAO,OAAOR,SAC9B7C,EAAawC,WAGlBL,EAAAA,EAAAA,KAAA,SAAAU,SAAO,yBACPV,EAAAA,EAAAA,KAACmB,EAAAA,EAAQ,CACPC,KAAM,eACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,2CAEXb,UAEFV,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,KAAK,WAAUf,SACpBnC,EAAsBmD,KAAI,SAACC,GAC1B,OACE3B,EAAAA,EAAAA,KAACwB,EAAAA,EAAOI,OAAM,CAEZC,MAAOF,EAAYrC,IAAIoB,SAEtBiB,EAAYP,MAHRO,EAAYrC,IAMvB,gBAQhB,C","sources":["pages/dashboard/groups/components/addParticipants.modal.tsx"],"sourcesContent":["import { Card, Descriptions, Form, Modal, Select } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport FormItem from \"antd/es/form/FormItem\";\nimport React, { useEffect, useState } from \"react\";\nimport { IUsersData } from \"../../../../interfaces/response/users.Respo.interafce\";\nimport services from \"../../../../services\";\n\nfunction AddGroupParticipantsModal({\n  open,\n  setOpen,\n  groupDetails,\n  handleSubmit,\n  addingParticipants,\n}: any) {\n  const [form] = useForm();\n  const [availableParticipants, setAvailableParticipants] = useState<\n    IUsersData[]\n  >([]);\n\n  const getAvailableUsers = async () => {\n    let response = await services.getAvailableUsersForGroup(groupDetails._id);\n    if (response.success) setAvailableParticipants(response.data.users);\n  };\n\n  useEffect(() => {\n    getAvailableUsers();\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n  return (\n    <Modal\n      open={open}\n      onCancel={() => {\n        setOpen(false);\n      }}\n      onOk={() => {\n        form.submit();\n      }}\n      title=\"Add Participants\"\n      okButtonProps={{\n        title: \"Submit\",\n        type: \"primary\",\n        loading: addingParticipants,\n        disabled: addingParticipants,\n      }}\n    >\n      <Card>\n        <Form form={form} onFinish={handleSubmit} onFinishFailed={() => {}}>\n          <div>\n            <Descriptions>\n              <Descriptions.Item label={\"Name\"}>\n                {groupDetails.title}\n              </Descriptions.Item>\n            </Descriptions>\n            <label>Select Participants</label>\n            <FormItem\n              name={\"participants\"}\n              rules={[\n                {\n                  required: true,\n                  message: \"Select atleast one participant to add!\",\n                },\n              ]}\n            >\n              <Select mode=\"multiple\">\n                {availableParticipants.map((participant) => {\n                  return (\n                    <Select.Option\n                      key={participant._id}\n                      value={participant._id}\n                    >\n                      {participant.name}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            </FormItem>\n          </div>\n        </Form>\n      </Card>\n    </Modal>\n  );\n}\n\nexport default AddGroupParticipantsModal;\n"],"names":["_ref","open","setOpen","groupDetails","handleSubmit","addingParticipants","_useForm","useForm","form","_slicedToArray","_useState","useState","_useState2","availableParticipants","setAvailableParticipants","getAvailableUsers","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","services","getAvailableUsersForGroup","_id","sent","success","data","users","stop","apply","arguments","useEffect","resetFields","_jsx","Modal","onCancel","onOk","submit","title","okButtonProps","type","loading","disabled","children","Card","Form","onFinish","onFinishFailed","_jsxs","Descriptions","Item","label","FormItem","name","rules","required","message","Select","mode","map","participant","Option","value"],"sourceRoot":""}